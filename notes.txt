Project Notes:

4_18_2017 -->
MB suggests that we randomize atomic operations to obfuscate pattern generated by consistant memory bus locking
  - idea is that same operation over and over would be easy to detect as malicious (if Bracket can monitor this)
<--

4_20_2017 -->
"find index[0,1]/type -exec cat {} \;"
MB
Cache information: path -- /sys/devices/system/cpu/<cpu_index>/cache/
  1. index0 is data L1 cache
  2. index1 is instruction L1 cache
  3. index2 is L2 cache
  4. index3 is L3 cache
  
JN
CPU information: path -- /proc/cpuinfo
  1. MHz = 1600.0
  2. Cache alignment = 64
  3. important flags for latency measuring: rdtscp constant_tsc nonstop_tsc
     a. this means that we are able to use rdtscp reliably for clock performance
 
Now that we have the cache and clock information, implementation of the probing code can begin. 
  - meet with Prof Loew to discuss memory locking and potential avenues
<--


Resources:

http://btorpey.github.io/blog/2014/02/18/clock-sources-in-linux/ --> Measuring Latency in Linux
https://github.com/btorpey/clocks/blob/master/ClockBench.cpp --> example code for assembly RDTSCP
